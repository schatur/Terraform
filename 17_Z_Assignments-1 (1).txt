Create the variables file (variables.tf) and add four variables with these default values:
	1. container_name: mysql.
	2. mysql_root_password: P4sSw0rd0!.
	3. mysql_network_name: mysql_internal_network.
	4. mysql_volume_name: mysql_data.

Create the images file (images.tf)
	1. Add the docker_image resource and call it mysql_image.
	2. Set the name to mysql:5.7.

Create the networks file (networks.tf):-
	1. Add the docker_network resource and call it private_bridge_network.
	2. Set the name to use the mysql_network_name variable.
	3. Set the driver to bridge.
	4. Set internal to true.

Create the volumes file (volume.tf):-
	1. In volumes.tf add the docker_volume resource and call it mysql_data_volume.
	2. Set the name to use the mysql_volume_name variable.

Create the main file (main.tf):-
	1. In main.tf add the docker_container resource and call it mysql_container.
	2. Set the name to use the container_name variable.
	3. Set the image to use the name of the image coming from docker_image.
	4. Create an environment variable for MYSQL_ROOT_PASSWORD and set it to the mysql_root_password variable.
	5. Configure the container volume to use the volume created by docker_volume, and make sure the container_path is set to /var/lib/mysql.
	7. The container needs to use the network created by docker_network.

Deploy the infrastructure
	1. Initialize Terraform.
	2. Validate the files.
	3. Generate a Terraform plan.
	4. Deploy the infrastructure using the plan file.



vi main.tf

provider "docker" {

}
resource "docker_container" "mysql_container" {
  name  = "${var.container_name}"
  image = "${docker_image.mysql_image.name}"
  env = [
    "MYSQL_ROOT_PASSWORD=${var.mysql_root_password}"
  ]

  volumes {
    volume_name    = "${docker_volume.mysql_data_volume.name}"
    container_path = "/var/lib/mysql"
  }
  networks_advanced {
    name = "${docker_network.private_bridge_network.name}"

  }

}



vi variables.tf

variable "container_name" {
  default = "mysql"
}

variable "mysql_root_password" {
  default = "P4sSw0rd0!"
}
variable "mysql_network_name" {
  default = "mysql_internal_network"
}
variable "mysql_volume_name" {
  default = "mysql_data"
}


vi images.tf

resource "docker_image" "mysql_image" {
  name = "mysql:5.7"
}



vi networks.tf

resource "docker_network" "private_bridge_network" {
  name     = "${var.mysql_network_name}"
  driver   = "bridge"
  internal = "true"
}



vi volumes.tf

resource "docker_volume" "mysql_data_volume" {
  name = "${var.mysql_volume_name}"
}



$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "docker" (terraform-providers/docker) 2.7.1...



$ terraform validate

Success! The configuration is valid, but there were some validation warnings as shown above.



$ terraform plan -out tfplan

Plan: 4 to add, 0 to change, 0 to destroy.



$ terraform apply "tfplan"
docker_image.mysql_image: Creating...
docker_volume.mysql_data_volume: Creating...
docker_network.private_bridge_network: Creating...
docker_volume.mysql_data_volume: Creation complete after 0s [id=mysql_data]
docker_network.private_bridge_network: Creation complete after 2s [id=56caf6a53a6d0f2fcf6c87ab2e1f5b5c607e25f4380262e0b85ce857b67bf4e9]
docker_image.mysql_image: Still creating... [10s elapsed]
docker_image.mysql_image: Still creating... [20s elapsed]
docker_image.mysql_image: Creation complete after 26s [id=sha256:a4fdfd462add8e63749aa08ff0044b13d342a042965f1ec6744586cda10dfce9mysql:5.7]
docker_container.mysql_container: Creating...
docker_container.mysql_container: Still creating... [10s elapsed]
docker_container.mysql_container: Creation complete after 20s [id=e0f72f56ca0dd5e827beb312a200d199433565f9bce3189ab985fd70ee19b2d6]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.



$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
e0f72f56ca0d        mysql:5.7           "docker-entrypoint.sâ€¦"   About a minute ago   Up 55 seconds                           mysql

$ docker network ls | grep mysql
56caf6a53a6d        mysql_internal_network    bridge              local
$ docker volume ls | grep mysql
local               mysql_data


$ sudo ls -l /var/lib/docker/volumes/mysql_data/_data
total 188476
-rw-r----- 1 tomcat microk8s       56 Jun  8 14:09 auto.cnf
-rw------- 1 tomcat microk8s     1680 Jun  8 14:09 ca-key.pem
-rw-r--r-- 1 tomcat microk8s     1112 Jun  8 14:09 ca.pem
-rw-r--r-- 1 tomcat microk8s     1112 Jun  8 14:09 client-cert.pem
-rw------- 1 tomcat microk8s     1676 Jun  8 14:09 client-key.pem
